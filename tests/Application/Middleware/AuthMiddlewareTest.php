<?php

namespace Tests\Application\Middleware;

use App\Domain\BicBucStriim\AppConstants;
use App\Domain\BicBucStriim\BicBucStriim;
use App\Domain\BicBucStriim\BicBucStriimRepository;
use App\Domain\BicBucStriim\Configuration;
use Aura\Auth\AuthFactory;
use DI\Container;
use DI\ContainerBuilder;
use Monolog\Logger;
use GuzzleHttp\Psr7\Response;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Tests\TestCase as Own_TestCase;
use App\Domain\BicBucStriim\BicBucStriim;
use App\Application\Middleware\AuthMiddleware;

// @todo get rid of this
if (!defined('BBS_BASE_PATH')) {
    define('BBS_BASE_PATH', '');
}

class AuthMiddlewareTest extends Own_TestCase
{
    //public const DB2 = __DIR__ . '/../../fixtures/data2.db';
    //public const DATA = __DIR__ . '/../twork/data';
    //public const DATADB = __DIR__ . '/../twork/data/data.db';
    //public $bbs;
    private $prophet;
    public Container $container;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        // Sometimes the value is much lower than the 3600 used by default.
        // So we read the value defined in php.ini to be safe.
        define('BBS_IDLE_TIME', ini_get('session.gc_maxlifetime'));
    }

    protected function setUp(): void
    {
        //if (file_exists(self::DATA)) {
        //    system("rm -rf " . self::DATA);
        //}
        //mkdir(self::DATA, 0777, true);
        //copy(self::DB2, self::DATADB);
        //$this->bbs = new BicBucStriim(self::DATADB, false);
        $this->prophet = new \Prophecy\Prophet();
        $cb = new ContainerBuilder();
        $cb->addDefinitions([
            'settings' => [
                'idleTime' => 1440,
                'rememberme_cookie_name' => 'bbs',
            ],
            Configuration::class => [
                AppConstants::REMEMBER_COOKIE_ENABLED => false,
                AppConstants::REMEMBER_COOKIE_KEY => '',
                AppConstants::REMEMBER_COOKIE_DURATION => 1,
            ],
        ]);
        $this->container = $cb->build();
    }

    protected function tearDown(): void
    {
        //system("rm -rf " . self::DATA);
        $this->prophet->checkPredictions();
    }

    /** Create a request handler that simply assigns the $request that it receives to a public property
     * of the returned response, so that we can then inspect that request.
     */
    protected function createRequestHandler(): RequestHandlerInterface
    {
        $response = new Response();
        return new class ($response) implements RequestHandlerInterface {
            private $response;

            public function __construct(ResponseInterface $response)
            {
                $this->response = $response;
            }

            public function handle(ServerRequestInterface $request): ResponseInterface
            {
                $this->response->request = $request;
                return $this->response;
            }
        };
    }
    public function test_checkRequest4Auth()
    {
        $bbs = $this->prophet->prophesize(BicBucStriimRepository::class);
        $logger = new Logger("test");
        //$pdo = new \PDO('sqlite:'.self::DATADB);
        //$container = new Container();
        //$instance = new AuthMiddleware($logger, $this->bbs, $container);
        $instance = new AuthMiddleware($logger, $bbs->reveal(), $this->container);
        $request = $this->createRequest("GET", "/", ['PHP_AUTH_USER' => 'user', 'PHP_AUTH_PW' => 'password'], [], []);
        $ad = $instance->checkRequest4Auth($request);
        $this->assertNotNull($ad);
        $this->assertEquals(['user', 'password'], $ad);
        $request = $this->createRequest("GET", "/", ['HTTP_AUTHORIZATION' => 'Basic ' . base64_encode('user:password')], [], []);
        $ad = $instance->checkRequest4Auth($request);
        $this->assertNotNull($ad);
        $this->assertEquals(['user', 'password'], $ad);
        $request = $this->createRequest("GET", "/", [], [], []);
        $this->assertNull($instance->checkRequest4Auth($request));
        $request = $this->createRequest("GET", "/", ['HTTP_AUTHORIZATION' => 'Basic ' . 'bla'], [], []);
        $ad = $instance->checkRequest4Auth($request);
        $this->assertNull($ad);
    }

    public function test___invoke1()
    {
        self::markTestIncomplete('needs real database');
        $logger = new Logger("test");
        //$pdo = new \PDO('sqlite:'.self::DATADB);
        //$container = new Container();
        //$instance = new AuthMiddleware($logger, $this->bbs, $container);
        $bbs = $this->prophet->prophesize(BicBucStriimRepository::class);
        $instance = new AuthMiddleware($logger, $bbs->reveal(), $this->container);
        $request = $this->createRequest("GET", "/", ['PHP_AUTH_USER' => 'user', 'PHP_AUTH_PW' => 'password'], [], []);
        $response = $instance->process($request, $this->createRequestHandler());
        // @checkme this actually sends a 302 Redirect to /login/
        $this->assertEquals(401, $response->getStatusCode());
        $this->assertEquals('', $response->getBody()->getContents());
    }

    public function test___invoke2()
    {
        self::markTestIncomplete('needs real database');
        $logger = new Logger("test");
        //$pdo = new \PDO('sqlite:'.self::DATADB);
        //$container = new Container();
        //$instance = new AuthMiddleware($logger, $this->bbs, $container);
        $bbs = $this->prophet->prophesize(BicBucStriimRepository::class);
        $instance = new AuthMiddleware($logger, $bbs->reveal(), $this->container);
        $request = $this->createRequest("GET", "/", ['PHP_AUTH_USER' => 'admin', 'PHP_AUTH_PW' => 'admin'], [], []);
        $response = $instance->process($request, $this->createRequestHandler());
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('', $response->getBody()->getContents());
    }
}
